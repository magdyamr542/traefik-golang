http:
  # Routers
  routers:
    # Define a connection between requests and services
    to-backend:
      rule: "PathPrefix(`/backend/`)"
      service: backend
      middlewares:
        - with-strip-prefix
        - with-ratelimiting

    to-backend-basic-auth:
      rule: "PathPrefix(`/backend/`) && Method(`POST`)"
      service: backend
      middlewares:
        - with-strip-prefix
        - with-basic-auth

    to-frontend:
      rule: "PathPrefix(`/frontend/`)"
      service: frontend
      middlewares:
        - with-strip-prefix

  # Middlewares
  middlewares:
    with-strip-prefix:
      stripPrefix:
        prefixes:
          - "/backend"
          - "/frontend"

    with-basic-auth:
      basicAuth:
        users:
          - "user:$2a$12$wmm9X7OPcsWpgsmMTzxnQOpAQJPyf4a2XNBY6eNHTvYkdshHJmb1S" # password is generate by bcrypt. password is "password"

    with-ratelimiting:
      rateLimit:
        average: 10 # 10 req. per min
        period: "1m"
        burst: 10

  # Services
  services:
    # Define how to reach an existing service on our infrastructure
    backend:
      loadBalancer:
        # if the client provides this cookie in the request, they are routed to the same server that handled it before.
        sticky:
          cookie:
            name: backend_sticky_cookie
            secure: true
            httpOnly: true
        # monitor load of the servers.
        healthCheck:
          path: /health
          interval: "10s"
          timeout: "3s"
        servers:
          - url: http://backend1:1234
          - url: http://backend2:1234
          - url: http://backend3:1234

    frontend:
      loadBalancer:
        healthCheck:
          path: /health
          interval: "10s"
          timeout: "3s"
        servers:
          - url: http://frontend1:1234
          - url: http://frontend2:1234
